#!/usr/bin/env ruby

require 'http'

def describe(name, &body)
  puts
  puts name

  begin
    body[]
  rescue Exception => e
    bad e
  end
end

def bad(msg)
  puts "\033[31m#{msg}\033[0m"
end

def good(msg)
  puts "\033[32m#{msg}\033[0m"
end

def test(name, cond)
  cond ? good('  ' + name) : bad('  ' + name)
end

def conf
  _, body = get '/mock/conf'
  puts body.to_json
end

def debug
  @debug = true
end

def host
  ENV['HOST'] || 'localhost'
end

def port
  ENV['PORT'] || '3000'
end

def base_url
  "http://#{host}:#{port}"
end

%w[head options delete post put patch get].each do |m|
  define_singleton_method m do |path, **opts|
    begin
      rep = HTTP.send(m, base_url + path, **opts)
      puts rep.inspect if @debug
      puts rep.body.to_s.inspect if @debug

      begin
        [rep.code, JSON.parse(rep.body.to_s)]
      rescue Exception => e
        bad e if @error
        [rep.code, rep.body]
      end
    rescue Exception => e
      bad e if @error
      [nil, nil]
    end
  end
end

@debug = false
@error = true

code, _ = put '/mock/conf'
unless code == 200
  @server =
    Thread.new do
      load './mockbetter'
    end
  sleep 1
end

puts "\n---- Starting Test Suite ----"

describe 'get config' do
  put '/mock/reset'
  code, body = get '/mock/conf'
  test 'responds with 200',            code && code == 200
  test 'responds with default config', body.dig('default', 'code') == '200'
  test 'responds with default config', body.dig('default', 'mode') == 'mock'
end

describe 'dump default mode' do
  put '/mock/reset'
  put '/mock/conf',
    json: { default: { mode: 'dump' } }
  code, body = get '/tenant1'
  puts body['message']
  test 'respondeds with 200',          code && code == 200
  test 'method captured and returned', body['method'] == 'GET'
  test 'path captured and returned',   body['path'] == '/tenant1'
end

describe 'mock default mode' do
  put '/mock/reset'
  put '/mock/conf',
    json: { default: { code: 404, mode: 'mock' } }
  code, body = get '/tenant1'
  test 'responds with configured status', code && code == 404

  put '/mock/conf',
    json: { default: { body: { message: 'hello world' }, mode: 'mock' } }
  code, body = get '/tenant1'
  test 'responds with configured body', body['message'] == 'hello world'
  test 'retains configured status',     code && code == 404
end

describe 'echo default mode' do
  put '/mock/reset'
  put '/mock/conf', json: { default: { mode: 'echo' } }
  code, body = patch '/tenant1', json: { message: 'hello' }
  test 'responds with 200',  code && code == 200
  test 'responds with body', body['message'] == 'hello'
end

describe 'mock requests with tenants' do
  put '/mock/reset'
  put '/mock/conf',
    json: { default: { code: 404, mode: 'mock', body: { message: 'hello' } } }
  put '/mock/routes/tenant1',
    json: { method: 'POST', body: { message: 'route1' }, code: 503, path: '/route1' }
  put '/mock/routes/tenant2',
    json: { method: 'DELETE', body: { message: 'route2' }, code: 201, path: '/route2' }

  code, body = put '/tenant1/route1'
  test 'only mocks given method', code && code == 404

  code, body = post '/tenant1/route1'
  test 'responds with given code', code && code == 503
  test 'responds with given code', body['message'] == 'route1'

  code, body = delete '/tenant2/route3'
  test 'only mocks given route', code && code == 404

  code, body = post '/tenant2/route1'
  test 'only mocks given tenant', code && code == 404

  code, body = delete '/tenant2/route2'
  test 'responds with given code per tenant', code && code == 201
  test 'responds with given code per tenant', body['message'] == 'route2'

  delete '/mock/routes/tenant1',
    json: { method: 'POST', path: '/route1' }

  code, body = post '/tenant1/route1'
  test 'responds with default code after deletion', code && code == 404
  test 'responds with given code after deletion', body['message'] == 'hello'

  code, body = delete '/tenant2/route2'
  test 'delets only specified tenant (code)', code && code == 201
  test 'delets only specified tenant (body)', body['message'] == 'route2'

  put '/mock/reset'
  code, body = delete '/tenant2/route2'
  test 'reset deletes all tenants (code)', code && code == 200
  test 'reset deletes all tenants (body)', body['message'] == 'mock better'
end

describe 'request history' do
  put '/mock/reset'

  post '/tenant1/route1', json: { message: 1 }
  post '/tenant1/route2', json: { message: 2 }
  post '/tenant1/route3', json: { message: 3 }

  post '/tenant2/route1', json: { message: 3 }
  post '/tenant2/route2', json: { message: 2 }
  post '/tenant2/route3', json: { message: 1 }

  _, body = get '/mock/history/tenant1'
  test 'records tenant history', body.map { |r| r['body']['message'] } == [1, 2, 3]

  _, body = get '/mock/history/tenant2'
  test 'records multiple tenants', body.map { |r| r['body']['message'] } == [3, 2, 1]

  delete '/mock/history/tenant1'
  _, body = get '/mock/history/tenant1'
  test 'deletes tenant', body == []

  _, body = get '/mock/history/tenant2'
  test 'deletes only specified tenant', body.map { |r| r['body']['message'] } == [3, 2, 1]

  put '/mock/reset'
  _, body = get '/mock/history/tenant2'
  test 'reset deletes all tenants', body == []
end

describe 'reset history ignores routes' do
  put '/mock/reset'
  put '/mock/routes/tenant1', json: { method: 'POST', path: 'path' }
  delete '/mock/history/tenant1'

  _, body = get '/mock/conf'
  test 'reset history removes all requests',
    body['tenants']['tenant1']['history'].count.zero?
  test 'reset history leaves routes intact',
    body['tenants']['tenant1']['routes'].count == 1
end

describe 'reset routes ignores history' do
  put '/mock/reset'
  post '/tenant1/route1', json: { message: 1 }
  delete '/mock/routes/tenant1'

  _, body = get '/mock/conf'
  test 'reset routes removes all routes',
    body['tenants']['tenant1']['routes'].count.zero?
  test 'reset routes leaves history intact',
    body['tenants']['tenant1']['history'].count == 1
end

puts "\n---- Test Suite Complete ----"
puts

@server&.exit
